package ${bussiPackage}.${entityPackage}.controller;

import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.bewg.pd.baseinfo.modules.entity.IdsReqParameter;
import com.bewg.pd.common.aspect.annotation.AutoLog;
import com.bewg.pd.common.system.query.QueryGenerator;
import com.bewg.pd.common.entity.vo.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import ${bussiPackage}.${entityPackage}.entity.${entityName};
import ${bussiPackage}.${entityPackage}.service.I${entityName}Service;

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import lombok.extern.slf4j.Slf4j;


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

 /**
 * @Description: ${tableVo.ftlDescription}
 * @Author:
 * @Date:   ${.now?string["yyyy-MM-dd"]}
 * @Version: V1.0
 */
@Slf4j
@Api(tags="${tableVo.ftlDescription}")
@RestController
@RequestMapping("/${entityName?uncap_first}")
public class ${entityName}Controller {
	@Autowired
	private I${entityName}Service ${entityName?uncap_first}Service;
	
	/**
	  * 分页列表查询
	 * @param ${entityName?uncap_first}
	 * @param pageNo
	 * @param pageSize
	 * @param req
	 * @return
	 */
	@AutoLog(value = "分页列表查询")
	@ApiOperation(value="分页列表查询", notes="分页列表查询")
	@GetMapping(value = "/list")
	@ApiIgnore
	public Result<IPage<${entityName}>> queryPageList(${entityName} ${entityName?uncap_first},
									  @RequestParam(name="pageNo", defaultValue="1") Integer pageNo,
									  @RequestParam(name="pageSize", defaultValue="10") Integer pageSize,
									  HttpServletRequest req) {
		Result<IPage<${entityName}>> result = new Result<>();
		QueryWrapper<${entityName}> queryWrapper = QueryGenerator.initQueryWrapper(${entityName?uncap_first}, req.getParameterMap());
		Page<${entityName}> page = new Page<${entityName}>(pageNo, pageSize);
		IPage<${entityName}> pageList = ${entityName?uncap_first}Service.page(page, queryWrapper);
		result.setSuccess(true);
		result.setResult(pageList);
		return result;
	}
	
	/**
	  *   添加
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "添加")
	@ApiOperation(value="添加", notes="添加")
	@PostMapping(value = "/add")
	public Result add(@RequestBody ${entityName} ${entityName?uncap_first}) {
		${entityName?uncap_first}Service.save(${entityName?uncap_first});
        return Result.ok("添加成功！");
	}
	
	/**
	  *  编辑
	 * @param ${entityName?uncap_first}
	 * @return
	 */
	@AutoLog(value = "编辑")
	@ApiOperation(value="编辑", notes="编辑")
	@PutMapping
	public Result edit(@RequestBody ${entityName} ${entityName?uncap_first}) {
		Result result = new Result<>();
		${entityName} ${entityName?uncap_first}Entity = ${entityName?uncap_first}Service.getById(${entityName?uncap_first}.getId());
		if(${entityName?uncap_first}Entity==null) {
			result.error500("未找到对应${tableVo.ftlDescription}");
		}else {
			boolean ok = ${entityName?uncap_first}Service.updateById(${entityName?uncap_first});
			if(ok) {
				result.success("修改成功!");
			}
		}

		return result;
	}
	
	/**
	  *   通过id删除
	 * @param id
	 * @return
	 */
	@AutoLog(value = "通过id删除")
	@ApiOperation(value="通过id删除", notes="通过id删除")
	@DeleteMapping(value = "/{id}")
	public Result<?> delete(@PathVariable(name="id",required=true) String id) {
		try {
			${entityName?uncap_first}Service.removeById(id);
		} catch (Exception e) {
			log.error("删除失败",e.getMessage());
			return Result.error("删除失败!");
		}
		return Result.ok("删除成功!");
	}
	
	/**
	  *  批量删除
	 * @param idsReqParameter
	 * @return
	 */
	@AutoLog(value = "批量删除")
	@ApiOperation(value="批量删除", notes="批量删除")
	@PostMapping(value = "/batch")
	public Result<${entityName}> deleteBatch(@RequestBody IdsReqParameter idsReqParameter) {
		Result<${entityName}> result = new Result<>();
		if(idsReqParameter.getIds().length > 0) {
		     this.${entityName?uncap_first}Service.removeByIds(Arrays.asList(idsReqParameter.getIds()));
        	 result.setCode(200);
             result.setSuccess(true);
             result.setMessage("删除成功!");
		}else {
			 result.setCode(500);
             result.setSuccess(false);
             result.setMessage("参数无法识别！");
		}
		return result;
	}
	
	/**
	  * 通过id查询
	 * @param id
	 * @return
	 */
	@AutoLog(value = "通过id查询")
	@ApiOperation(value="通过id查询", notes="通过id查询")
	@GetMapping(value = "/{id}}")
	public Result<${entityName}> queryById(@PathVariable(name="id",required=true) String id) {
		Result<${entityName}> result = new Result<>();
		${entityName} ${entityName?uncap_first} = ${entityName?uncap_first}Service.getById(id);
		if(${entityName?uncap_first}==null) {
			result.error500("未找到对应${tableVo.ftlDescription}");
		}else {
			result.setResult(${entityName?uncap_first});
			result.setSuccess(true);
		}
		return result;
	}

}
